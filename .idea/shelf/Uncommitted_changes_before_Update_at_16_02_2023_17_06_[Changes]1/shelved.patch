Index: app/src/main/java/sds/vpn/gram/data/repository/UserRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sds.vpn.gram.data.repository\r\n\r\nimport android.annotation.SuppressLint\r\nimport androidx.datastore.core.DataStore\r\nimport androidx.datastore.preferences.core.Preferences\r\nimport androidx.datastore.preferences.core.edit\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\nimport kotlinx.coroutines.flow.first\r\nimport sds.vpn.gram.common.Constants\r\nimport sds.vpn.gram.data.remote.VpngramApi\r\nimport sds.vpn.gram.data.remote.dto.GetTrafficLimitResponse\r\nimport sds.vpn.gram.data.remote.dto.toServer\r\nimport sds.vpn.gram.domain.model.Server\r\nimport sds.vpn.gram.domain.repository.UserRepository\r\nimport java.text.SimpleDateFormat\r\n\r\nclass UserRepositoryImpl(\r\n    private val api: VpngramApi,\r\n    private val dataStore: DataStore<Preferences>\r\n    ): UserRepository {\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    override suspend fun registerNewUser(deviceId: String): List<Server> {\r\n        return try {\r\n            val servers = api.registerNewUser(\r\n                deviceId = deviceId,\r\n                dateRegistration = SimpleDateFormat(\"dd-MM-yyyy\").format(System.currentTimeMillis())\r\n            ).body()?.map { it.toServer() } ?: listOf()\r\n\r\n            dataStore.edit {\r\n                val serializedServers = Gson().toJson(servers)\r\n                it[Constants.SERVERS] = serializedServers\r\n            }\r\n\r\n            servers\r\n        } catch (e: Exception) {\r\n            listOf()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    override suspend fun registerRefUser(deviceId: String, referrerId: String): List<Server> {\r\n        return try {\r\n            val servers = api.registerRefUser(\r\n                deviceId = deviceId,\r\n                referrerId = referrerId,\r\n                dateRegistration = SimpleDateFormat(\"dd-MM-yyyy\").format(System.currentTimeMillis())\r\n            ).body()!!.map { it.toServer() }\r\n\r\n            dataStore.edit {\r\n                val serializedServers = Gson().toJson(servers)\r\n                it[Constants.SERVERS] = serializedServers\r\n            }\r\n\r\n            servers\r\n        } catch (e: Exception) {\r\n            listOf()\r\n        }\r\n    }\r\n\r\n    override suspend fun getTrafficLimit(deviceId: String): GetTrafficLimitResponse {\r\n        return try {\r\n            val trafficLimitResponse = api.getTrafficLimit(deviceId).body()!!\r\n\r\n            dataStore.edit {\r\n                it[Constants.TRAFFIC_LIMIT] = Gson().toJson(trafficLimitResponse)\r\n            }\r\n\r\n            trafficLimitResponse\r\n        } catch(e: Exception) {\r\n            try {\r\n                val data = dataStore.data.first()[Constants.TRAFFIC_LIMIT]!!\r\n                val getTrafficLimitResponse = object : TypeToken<GetTrafficLimitResponse>() {}.type\r\n\r\n                Gson().fromJson(data, getTrafficLimitResponse)\r\n            } catch (e: Exception) {\r\n                GetTrafficLimitResponse(0.0, 0.0)\r\n            }\r\n        }\r\n    }\r\n\r\n    override suspend fun checkTraffic(deviceId: String, serverId: String) {\r\n        try {\r\n            api.getTrafficSpent(\r\n                deviceId,\r\n                serverId\r\n            ).body()!!\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override suspend fun getCode(deviceId: String): String {\r\n        return try {\r\n            api.getCode(deviceId).body()!!\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            \"\"\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sds/vpn/gram/data/repository/UserRepositoryImpl.kt b/app/src/main/java/sds/vpn/gram/data/repository/UserRepositoryImpl.kt
--- a/app/src/main/java/sds/vpn/gram/data/repository/UserRepositoryImpl.kt	
+++ b/app/src/main/java/sds/vpn/gram/data/repository/UserRepositoryImpl.kt	
@@ -75,7 +75,7 @@
 
                 Gson().fromJson(data, getTrafficLimitResponse)
             } catch (e: Exception) {
-                GetTrafficLimitResponse(0.0, 0.0)
+                GetTrafficLimitResponse("0.0", 0.0)
             }
         }
     }
Index: app/src/main/java/sds/vpn/gram/ui/home/HomeViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sds.vpn.gram.ui.home\r\n\r\nimport androidx.datastore.core.DataStore\r\nimport androidx.datastore.preferences.core.Preferences\r\nimport androidx.datastore.preferences.core.edit\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.flow.Flow\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.asStateFlow\r\nimport kotlinx.coroutines.flow.first\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.runBlocking\r\nimport sds.vpn.gram.common.Constants\r\nimport sds.vpn.gram.common.DeviceUtils\r\nimport sds.vpn.gram.common.MyVpnTunnel\r\nimport sds.vpn.gram.common.ResourceProvider\r\nimport sds.vpn.gram.data.remote.dto.GetTrafficLimitResponse\r\nimport sds.vpn.gram.domain.model.Server\r\nimport sds.vpn.gram.domain.repository.AdsRepository\r\nimport sds.vpn.gram.domain.repository.PermissionsRepository\r\nimport sds.vpn.gram.domain.repository.ServerRepository\r\nimport sds.vpn.gram.domain.repository.UserRepository\r\n\r\n\r\nclass HomeViewModel(\r\n    private val serverRepository: ServerRepository,\r\n    private val userRepository: UserRepository,\r\n    private val permissionsRepository: PermissionsRepository,\r\n    private val adsRepository: AdsRepository,\r\n    val vpnService: MyVpnTunnel,\r\n    private val dataStore: DataStore<Preferences>,\r\n    private val resourceProvider: ResourceProvider\r\n) : ViewModel() {\r\n    val lastUsedServer: Flow<Server> = serverRepository.lastUsedServerFlow\r\n\r\n    private val _servers = MutableStateFlow<List<Server>>(listOf())\r\n    val servers = _servers.asStateFlow()\r\n\r\n    private val _trafficLimitResponse = MutableStateFlow(GetTrafficLimitResponse(0.0, 0.0))\r\n    val trafficLimitResponse = _trafficLimitResponse.asStateFlow()\r\n\r\n    private val _isAllGranted = MutableStateFlow<Boolean?>(null)\r\n    val isAllGranted = _isAllGranted.asStateFlow()\r\n\r\n    private val _showPermissionsRequest = MutableStateFlow(false)\r\n    val showPermissionsRequest = _showPermissionsRequest.asStateFlow()\r\n\r\n    init {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            _servers.emit(serverRepository.getServersFromDataStore())\r\n            _trafficLimitResponse.emit(\r\n                userRepository.getTrafficLimit(\r\n                    DeviceUtils.getAndroidID(resourceProvider.context)\r\n                )\r\n            )\r\n            updateIsAllGranted()\r\n            _showPermissionsRequest.emit(\r\n                adsRepository.showAds(\r\n                    DeviceUtils.getAndroidID(resourceProvider.context)\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    fun getChosenServer() = runBlocking {\r\n        try {\r\n            val chosenServerSerialized = dataStore.data.first()[Constants.CHOSEN_SERVER]\r\n            val serverType = object : TypeToken<Server>() {}.type\r\n\r\n            Gson().fromJson(chosenServerSerialized, serverType)\r\n        } catch (e: Exception) {\r\n            Server(\"\", \"\", \"\", 80, \"\")\r\n        }\r\n    }\r\n\r\n    fun setChosenServer(server: Server) = runBlocking {\r\n        dataStore.edit {\r\n            it[Constants.CHOSEN_SERVER] = Gson().toJson(server)\r\n        }\r\n    }\r\n\r\n    fun connectToServer(server: Server) {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            val serverConfig = serverRepository.getVpnConfig(\r\n                DeviceUtils.getAndroidID(resourceProvider.context),\r\n                server\r\n            )\r\n\r\n            vpnService.connectVpn(\r\n                server,\r\n                serverConfig,\r\n            )\r\n        }\r\n    }\r\n\r\n    fun updateIsAllGranted() {\r\n        viewModelScope.launch {\r\n            _isAllGranted.emit(permissionsRepository.checkAllPermissionsGranted())\r\n        }\r\n    }\r\n\r\n    fun isVpnConnected(): Boolean {\r\n        return vpnService.isVpnConnected()\r\n    }\r\n\r\n    fun disconnectFromServer(server: Server) {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            vpnService.disconnectVpn()\r\n            serverRepository.disconnect(\r\n                DeviceUtils.getAndroidID(resourceProvider.context),\r\n                server.serverId\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sds/vpn/gram/ui/home/HomeViewModel.kt b/app/src/main/java/sds/vpn/gram/ui/home/HomeViewModel.kt
--- a/app/src/main/java/sds/vpn/gram/ui/home/HomeViewModel.kt	
+++ b/app/src/main/java/sds/vpn/gram/ui/home/HomeViewModel.kt	
@@ -41,7 +41,7 @@
     private val _servers = MutableStateFlow<List<Server>>(listOf())
     val servers = _servers.asStateFlow()
 
-    private val _trafficLimitResponse = MutableStateFlow(GetTrafficLimitResponse(0.0, 0.0))
+    private val _trafficLimitResponse = MutableStateFlow(GetTrafficLimitResponse("0.0", 0.0))
     val trafficLimitResponse = _trafficLimitResponse.asStateFlow()
 
     private val _isAllGranted = MutableStateFlow<Boolean?>(null)
